{"version":3,"sources":["../../src/commands/build.js"],"names":["_","require","path","report","buildHTML","buildProductionBundle","bootstrap","apiRunnerNode","copyStaticDirs","initTracer","stopTracer","chalk","tracer","globalTracer","signalExit","telemetry","queryRunner","store","emitter","db","pageDataUtil","reportFailure","msg","err","log","panic","handleChangedCompilationHash","state","pageQueryIds","newHash","publicDir","join","program","directory","stalePaths","difference","pages","keys","rewriteCompilationHashes","dispatch","type","payload","module","exports","activity","openTracingConfigFile","trackCli","buildSpan","startSpan","setTag","parentSpan","graphqlRunner","queryIds","calcBootstrapDirtyQueryIds","getState","groupQueryIds","staticQueryIds","activityTimer","start","processStaticQueries","end","graphql","stats","catch","webpackCompilationHash","hash","processPageQueries","waitJobsFinished","Promise","resolve","reject","onEndJob","jobs","active","length","off","on","saveState","boundActionCreators","setProgramStatus","buildRenderer","pagePaths","buildPages","stripIndent","context","bold","info","process","uptime","finish","build"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst _ = require(`lodash`)\nconst path = require(`path`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst buildHTML = require(`./build-html`)\nconst buildProductionBundle = require(`./build-javascript`)\nconst bootstrap = require(`../bootstrap`)\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { copyStaticDirs } = require(`../utils/get-static-dir`)\nconst { initTracer, stopTracer } = require(`../utils/tracer`)\nconst chalk = require(`chalk`)\nconst tracer = require(`opentracing`).globalTracer()\nconst signalExit = require(`signal-exit`)\nconst telemetry = require(`gatsby-telemetry`)\nconst queryRunner = require(`../query`)\nconst { store, emitter } = require(`../redux`)\nconst db = require(`../db`)\nconst pageDataUtil = require(`../utils/page-data`)\n\nfunction reportFailure(msg, err: Error) {\n  report.log(``)\n  report.panic(msg, err)\n}\n\ntype BuildArgs = {\n  directory: string,\n  sitePackageJson: object,\n  prefixPaths: boolean,\n  noUglify: boolean,\n  openTracingConfigFile: string,\n}\n\nconst handleChangedCompilationHash = async (state, pageQueryIds, newHash) => {\n  const publicDir = path.join(state.program.directory, `public`)\n  const stalePaths = _.difference([...state.pages.keys()], pageQueryIds)\n  await pageDataUtil.rewriteCompilationHashes(\n    { publicDir },\n    stalePaths,\n    newHash\n  )\n  store.dispatch({\n    type: `SET_WEBPACK_COMPILATION_HASH`,\n    payload: newHash,\n  })\n}\n\nmodule.exports = async function build(program: BuildArgs) {\n  let activity\n  initTracer(program.openTracingConfigFile)\n\n  telemetry.trackCli(`BUILD_START`)\n  signalExit(() => {\n    telemetry.trackCli(`BUILD_END`)\n  })\n\n  const buildSpan = tracer.startSpan(`build`)\n  buildSpan.setTag(`directory`, program.directory)\n\n  const { graphqlRunner } = await bootstrap({\n    ...program,\n    parentSpan: buildSpan,\n  })\n\n  const queryIds = queryRunner.calcBootstrapDirtyQueryIds(store.getState())\n  const { staticQueryIds, pageQueryIds } = queryRunner.groupQueryIds(queryIds)\n\n  activity = report.activityTimer(`run static queries`, {\n    parentSpan: buildSpan,\n  })\n  activity.start()\n  await queryRunner.processStaticQueries(staticQueryIds, { activity })\n  activity.end()\n\n  await apiRunnerNode(`onPreBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDirs()\n\n  activity = report.activityTimer(\n    `Building production JavaScript and CSS bundles`,\n    { parentSpan: buildSpan }\n  )\n  activity.start()\n  const stats = await buildProductionBundle(program).catch(err => {\n    reportFailure(`Generating JavaScript bundles failed`, err)\n  })\n  activity.end()\n\n  const webpackCompilationHash = stats.hash\n  if (webpackCompilationHash !== store.getState().webpackCompilationHash) {\n    activity = report.activityTimer(`Rewriting compilation hashes`, {\n      parentSpan: buildSpan,\n    })\n    activity.start()\n    await handleChangedCompilationHash(\n      store.getState(),\n      pageQueryIds,\n      webpackCompilationHash\n    )\n    activity.end()\n  }\n\n  activity = report.activityTimer(`run page queries`)\n  activity.start()\n  await queryRunner.processPageQueries(pageQueryIds, { activity })\n  activity.end()\n\n  const waitJobsFinished = () =>\n    new Promise((resolve, reject) => {\n      const onEndJob = () => {\n        if (store.getState().jobs.active.length === 0) {\n          resolve()\n          emitter.off(`END_JOB`, onEndJob)\n        }\n      }\n      emitter.on(`END_JOB`, onEndJob)\n      onEndJob()\n    })\n\n  await waitJobsFinished()\n\n  await db.saveState()\n\n  require(`../redux/actions`).boundActionCreators.setProgramStatus(\n    `BOOTSTRAP_QUERY_RUNNING_FINISHED`\n  )\n\n  activity = report.activityTimer(`Building static HTML for pages`, {\n    parentSpan: buildSpan,\n  })\n  activity.start()\n  try {\n    await buildHTML.buildRenderer(program, `build-html`)\n    const pagePaths = [...store.getState().pages.keys()]\n    await buildHTML.buildPages({ program, pagePaths, activity })\n  } catch (err) {\n    reportFailure(\n      report.stripIndent`\n        Building static HTML failed${\n          err.context && err.context.path\n            ? ` for path \"${chalk.bold(err.context.path)}\"`\n            : ``\n        }\n\n        See our docs page on debugging HTML builds for help https://gatsby.dev/debug-html\n      `,\n      err\n    )\n  }\n  activity.end()\n\n  await apiRunnerNode(`onPostBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  report.info(`Done building in ${process.uptime()} sec`)\n\n  buildSpan.finish()\n  await stopTracer()\n}\n"],"file":"build.js"}