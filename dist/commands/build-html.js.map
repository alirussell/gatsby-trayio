{"version":3,"sources":["../../src/commands/build-html.js"],"names":["webpack","require","fs","webpackConfig","createErrorFromString","renderHTMLQueue","telemetry","runWebpack","compilerConfig","Promise","resolve","reject","run","e","stats","doBuildRenderer","program","directory","outputFile","hasErrors","webpackErrors","toJson","errors","filter","Boolean","error","length","Error","toString","buildRenderer","stage","config","buildPages","pagePaths","activity","decorateEvent","siteMeasurements","pagesCount","unlink","prettyError","stack","context","module","exports"],"mappings":"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","sourcesContent":["/* @flow */\nconst webpack = require(`webpack`)\nconst fs = require(`fs`)\n\nconst webpackConfig = require(`../utils/webpack.config`)\nconst { createErrorFromString } = require(`gatsby-cli/lib/reporter/errors`)\nconst renderHTMLQueue = require(`../utils/html-renderer-queue`)\nconst telemetry = require(`gatsby-telemetry`)\n\nconst runWebpack = compilerConfig =>\n  new Promise((resolve, reject) => {\n    webpack(compilerConfig).run((e, stats) => {\n      if (e) {\n        reject(e)\n      } else {\n        resolve(stats)\n      }\n    })\n  })\n\nconst doBuildRenderer = async (program, webpackConfig) => {\n  const { directory } = program\n  const stats = await runWebpack(webpackConfig)\n  const outputFile = `${directory}/public/render-page.js`\n  if (stats.hasErrors()) {\n    let webpackErrors = stats.toJson().errors.filter(Boolean)\n    const error = webpackErrors.length\n      ? createErrorFromString(webpackErrors[0], `${outputFile}.map`)\n      : new Error(\n          `There was an issue while building the site: ` +\n            `\\n\\n${stats.toString()}`\n        )\n    throw error\n  }\n}\n\nconst buildRenderer = async (program, stage) => {\n  const { directory } = program\n  const config = await webpackConfig(program, directory, stage, null)\n  await doBuildRenderer(program, config)\n}\n\nasync function buildPages({ program, pagePaths, activity }) {\n  const { directory } = program\n  telemetry.decorateEvent(`BUILD_END`, {\n    siteMeasurements: { pagesCount: pagePaths.length },\n  })\n\n  const outputFile = `${directory}/public/render-page.js`\n  try {\n    await renderHTMLQueue(outputFile, pagePaths, activity)\n    try {\n      await fs.unlink(outputFile)\n      await fs.unlink(`${outputFile}.map`)\n    } catch (e) {\n      // This function will fail on Windows with no further consequences.\n    }\n  } catch (e) {\n    const prettyError = createErrorFromString(e.stack, `${outputFile}.map`)\n    prettyError.context = e.context\n    throw prettyError\n  }\n}\n\nmodule.exports = {\n  buildRenderer,\n  buildPages,\n}\n"],"file":"build-html.js"}